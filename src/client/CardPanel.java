/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import championAssets.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;
import server.GameCommand;

public class CardPanel extends javax.swing.JFrame {

    private String nickname;
    private ArrayList<Champion> championListModel;
    private static final String CHAMPIONS_SETTINGS = "champions.settings";
    private DefaultListModel<String> championListDefaultModel;
    private Champion activeChampion;
//    private Champion choosenChampion;
    GameClient client;
    protected SearchingGameWindow sgw;
    protected FightPanel fightPanel;
    
    public CardPanel(String nickname) {
        this.nickname = nickname;
        myInitBefore();
        initComponents();
        
        this.client = new GameClient(this, nickname);
        this.client.connect();
        myInitAfter();
    }

    private void myInitBefore() {
        championListModel = new ArrayList<>();
        championListDefaultModel = new DefaultListModel<>();
        applyChampionsList();
        activeChampion = championListModel.getFirst();
        sgw = new SearchingGameWindow(this);
        sgw.setVisible(false);
    }

    private void myInitAfter() {
        for (Champion champ : championListModel) {
            championListDefaultModel.addElement(champ.getName());
        }
        championList.setModel(championListDefaultModel);
        nicknameLabel.setText(nickname);

        Closer closer = new Closer(client);
        addWindowListener(closer);
    }

    public void fightStart(String gameId, String enemyName, String enemyChampion)
    {
        fightPanel = new FightPanel(gameId, client, enemyName, enemyChampion);
        fightPanel.setVisible(true);
    }
    public void showSearchingGameWindow(boolean value)
    {
        System.out.println("OPENING WAITING SCREEN");
        sgw.setVisible(value);
        setVisible(!value);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UserMainCard = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        MainOptionPanel = new javax.swing.JPanel();
        findGameButton = new javax.swing.JButton();
        championsButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        leaveButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nicknameLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        sendMessageButton = new javax.swing.JButton();
        messageTextField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        chooseChampionList = new javax.swing.JList<>();
        chooseChampionLabel = new javax.swing.JLabel();
        reconnectButton = new javax.swing.JButton();
        ChampionsCard = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        championList = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        championIconPanel = new javax.swing.JPanel();
        championIconImage = new javax.swing.JLabel();
        championNameLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        hpLabel = new javax.swing.JLabel();
        adLabel = new javax.swing.JLabel();
        mdLabel = new javax.swing.JLabel();
        armorLabel = new javax.swing.JLabel();
        mArmorLabel = new javax.swing.JLabel();
        roleLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        championDescriptionTextPane = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        championListLabel = new javax.swing.JLabel();
        returnMenuButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fight Or Die v2");
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        title.setFont(new java.awt.Font("Century Schoolbook", 0, 100)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setText("Fight Or Die");
        title.setName(""); // NOI18N

        MainOptionPanel.setForeground(new java.awt.Color(255, 255, 255));
        MainOptionPanel.setLayout(new java.awt.GridLayout(4, 1, 3, 5));

        findGameButton.setFont(findGameButton.getFont().deriveFont(findGameButton.getFont().getSize()+24f));
        findGameButton.setText("Find game");
        findGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findGameButtonActionPerformed(evt);
            }
        });
        MainOptionPanel.add(findGameButton);

        championsButton.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        championsButton.setText("Champions");
        championsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                championsButtonActionPerformed(evt);
            }
        });
        MainOptionPanel.add(championsButton);

        profileButton.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        profileButton.setText("Profile");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });
        MainOptionPanel.add(profileButton);

        leaveButton.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        leaveButton.setText("Leave");
        leaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveButtonActionPerformed(evt);
            }
        });
        MainOptionPanel.add(leaveButton);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("WELCOME ");

        nicknameLabel.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        nicknameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nicknameLabel.setText("123456789011");

        jPanel1.setLayout(new java.awt.BorderLayout());

        messageTextArea.setEditable(false);
        messageTextArea.setColumns(20);
        messageTextArea.setLineWrap(true);
        messageTextArea.setRows(5);
        jScrollPane3.setViewportView(messageTextArea);

        jPanel1.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        sendMessageButton.setText("SEND");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        messageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageTextFieldActionPerformed(evt);
            }
        });
        messageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                messageTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(messageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPanel5, java.awt.BorderLayout.PAGE_END);

        chooseChampionList.setModel(championListDefaultModel);
        chooseChampionList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseChampionListMouseClicked(evt);
            }
        });
        chooseChampionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                chooseChampionListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(chooseChampionList);

        chooseChampionLabel.setText("CHOOSED CHAMPION:");

        reconnectButton.setText("RECONNECT");
        reconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserMainCardLayout = new javax.swing.GroupLayout(UserMainCard);
        UserMainCard.setLayout(UserMainCardLayout);
        UserMainCardLayout.setHorizontalGroup(
            UserMainCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserMainCardLayout.createSequentialGroup()
                .addGroup(UserMainCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserMainCardLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane4)
                        .addGap(93, 93, 93))
                    .addGroup(UserMainCardLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(chooseChampionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(UserMainCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(UserMainCardLayout.createSequentialGroup()
                        .addGroup(UserMainCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(nicknameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MainOptionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(75, 75, 75)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(reconnectButton))
                .addGap(35, 35, 35))
            .addGroup(UserMainCardLayout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UserMainCardLayout.setVerticalGroup(
            UserMainCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserMainCardLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserMainCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nicknameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseChampionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserMainCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(UserMainCardLayout.createSequentialGroup()
                        .addGroup(UserMainCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MainOptionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reconnectButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        getContentPane().add(UserMainCard, "UserMainCard");

        championList.setModel(championListDefaultModel);
        championList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                championListMouseClicked(evt);
            }
        });
        championList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                championListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(championList);

        championIconPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204)));

        javax.swing.GroupLayout championIconPanelLayout = new javax.swing.GroupLayout(championIconPanel);
        championIconPanel.setLayout(championIconPanelLayout);
        championIconPanelLayout.setHorizontalGroup(
            championIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(championIconPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(championIconImage, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        championIconPanelLayout.setVerticalGroup(
            championIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(championIconPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(championIconImage, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );

        championNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        championNameLabel.setText("Name");

        hpLabel.setText("Health Points:");

        adLabel.setText("Attack Damage:");

        mdLabel.setText("Magic Damage:");

        armorLabel.setText("Armor:");

        mArmorLabel.setText("Magic Defence: ");

        roleLabel.setText("Role:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hpLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(adLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(armorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mArmorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hpLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(armorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mArmorLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(championNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(championIconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(championNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(championIconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jScrollPane2.setAutoscrolls(true);

        championDescriptionTextPane.setText("Bohater: LIFESTEALER\nKlasa: Butcher\nStatystyki:\n\nZdrowie: 700.0\nAtak: 53.0\nObrona: 0.0\nSzybkość: 25.0\nKrytyczna szansa: 15.0\n\nUmiejętności:\n\nAd boost - Zwiększa siłę ataku do końca walki\n\nKoszt: 10.0\nTyp: boostad\nŁadunki: 3\n\nLifeSteal (pasywna) - Każdy atak przywraca niewielką ilość zdrowia do końca walki\n\nKoszt: 20.0\nTyp: lifesteal\nID: 111\n\nLIFESTEALER to silny ofensywny bohater, który polega na wysokiej wartości ataku i zdolności kradzieży życia. Jego brak obrony rekompensuje umiejętnością regeneracji zdrowia podczas walki. Strategia polega na szybkim eliminowaniu przeciwników, jednocześnie utrzymując własne zdrowie dzięki pasywnej umiejętności kradzieży życia.");
        championDescriptionTextPane.setHighlighter(null);
        jScrollPane2.setViewportView(championDescriptionTextPane);

        jLabel1.setText("Champion description:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        championListLabel.setText("Available champions:");

        returnMenuButton.setText("Return to main menu");
        returnMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ChampionsCardLayout = new javax.swing.GroupLayout(ChampionsCard);
        ChampionsCard.setLayout(ChampionsCardLayout);
        ChampionsCardLayout.setHorizontalGroup(
            ChampionsCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChampionsCardLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(ChampionsCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(returnMenuButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(championListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(192, 192, 192)
                .addGroup(ChampionsCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ChampionsCardLayout.setVerticalGroup(
            ChampionsCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChampionsCardLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(returnMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ChampionsCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ChampionsCardLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ChampionsCardLayout.createSequentialGroup()
                        .addComponent(championListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(ChampionsCard, "ChampionsCard");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findGameButtonActionPerformed
        // TODO add your handling code here:
//        System.out.println("WYBRANY CHAMPION: " + client.choosenChampion.getName());
        if(client.choosenChampion == null)
        {
            showError("","Choose champion before game.");
            return;
        }
        client.sendMessage(GameCommand.FIND.toString() + ">" + client.choosenChampion.getName());
//        searchingGame = true;
//        client.findGame();
//        getMessageTextArea().append("Searching for opponent...\n");
//        showSearchingGameWindow();
//        fightStart();
    }//GEN-LAST:event_findGameButtonActionPerformed

    private void championListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_championListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_championListMouseClicked

    private void championListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_championListValueChanged
        // TODO add your handling code here:
        JList list = (JList) evt.getSource();
        String selectedChampion = (String) list.getSelectedValue();
        if (selectedChampion != null) {
            if (activeChampion != null) {
                championNameLabel.setText(selectedChampion);//applyChampionCard
                applyChampionCard();
            }
            activeChampion = championListModel.stream()
                    .filter(champ -> champ.getName().equals(selectedChampion))
                    .findFirst()
                    .orElse(null);
        }
    }//GEN-LAST:event_championListValueChanged

    private void championsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_championsButtonActionPerformed
        // TODO add your handling code here:
        applyChampionCard();
        CardLayout cl = (CardLayout) getContentPane().getLayout();
        cl.show(getContentPane(), "ChampionsCard");
        System.out.println("Champions button clicked");
    }//GEN-LAST:event_championsButtonActionPerformed

    private void returnMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnMenuButtonActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) getContentPane().getLayout();
        cl.show(getContentPane(), "UserMainCard");
        System.out.println("MainOption button clicked");
    }//GEN-LAST:event_returnMenuButtonActionPerformed

    private void leaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveButtonActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(
                this,
                "Are you sure?",
                "Leaving",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (option == JOptionPane.YES_OPTION) {
            client.out.println("ENDLEAVEEND");
            dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_leaveButtonActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        // TODO add your handling code here:
        System.out.println(championListModel);
    }//GEN-LAST:event_profileButtonActionPerformed

    private void messageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageTextFieldActionPerformed
        // TODO add your handling code here:
//        String message = messageTextField.getText();
//        sendMessageButton.setEnabled(message.isBlank());
    }//GEN-LAST:event_messageTextFieldActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        // TODO add your handling code here:
//        String mess = messageTextField.getText();
        client.sendMessage(messageTextField.getText());
        messageTextField.setText("");
//        client.out.println(mess);
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void chooseChampionListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseChampionListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_chooseChampionListMouseClicked

    private void chooseChampionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_chooseChampionListValueChanged
        // TODO add your handling code here:
        JList list = (JList) evt.getSource();
        String selectedChampion = (String) list.getSelectedValue();
        if (selectedChampion != null) {
            activeChampion = championListModel.stream()
                    .filter(champ -> champ.getName().equals(selectedChampion))
                    .findFirst()
                    .orElse(null);
            if (activeChampion != null) {
               chooseChampionLabel.setText("CHOOSEN CHAMPION: " + selectedChampion);
               client.choosenChampion = activeChampion;
                applyChampionCard();
            }
            System.out.println(selectedChampion);
        }
    }//GEN-LAST:event_chooseChampionListValueChanged

    private void messageTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextFieldKeyReleased
        // TODO add your handling code here:
//        String mess = messageTextField.getText();
//        sendMessageButton.setEnabled(mess.length() >= 1);
    }//GEN-LAST:event_messageTextFieldKeyReleased

    private void reconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reconnectButtonActionPerformed
        // TODO add your handling code here:
        client.connect();
    }//GEN-LAST:event_reconnectButtonActionPerformed
    public JTextArea getMessageTextArea() {
        return messageTextArea;
    }

    public JTextField getMessageTextField() {
        return messageTextField;
    }
    
    public String getNickname() {
        return nickname;
    }

    public Champion getChoosenChampion() {
        return client.choosenChampion;
    }
    public JButton getReconnectButton(){
        return reconnectButton;
    }
    
    public ArrayList<Champion> getChampionListModel() {
        return championListModel;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CardPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CardPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CardPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CardPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CardPanel lobby = new CardPanel("wygon");
                lobby.setVisible(true);
//                lobby.connect();
            }
        });
    }
    //Configuring champions
    private void configureChampion(Champion champion, String[] parts) {
        champion.setName(parts[0]);
        champion.setHP(Double.parseDouble(parts[1]));
        champion.setMaxHP(Double.parseDouble(parts[1]));
        champion.setLastRoundHP(Double.parseDouble(parts[1]));
        champion.setAttackDamage(Double.parseDouble(parts[2]));
        champion.setMagicDamage(Double.parseDouble(parts[3]));
        champion.setPhysicalResist(Double.parseDouble(parts[4]));
        champion.setMagicResist(Double.parseDouble(parts[5]));
        champion.setDistancePoint(Integer.parseInt(parts[6]));
        champion.setIcon(new ImageIcon("pictures/champions/" + champion.getName() + ".png"));
    }

    //Applying abilities to champion
    private void configureAbilities(Champion champion, String abilitiesPart) {
        String[] abilityParts = abilitiesPart.split("/");
        Ability[] abilities = new Ability[abilityParts.length];
        for (int i = 0; i < abilityParts.length; i++) {
            abilities[i] = Ability.fromString(abilityParts[i]);
        }
        champion.setAbilities(abilities);
    }

    public void applyChampionsList() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(CHAMPIONS_SETTINGS));
            String line = reader.readLine();
            while (line != null) {
                String[] bigParts = line.split(";");
                String[] parts = bigParts[1].split(",");
                String champ = bigParts[0];
                Champion champion = switch (champ) {
                    case "LIFESTEALER" ->
                        new LifeStealer();
                    case "MAGE" ->
                        new Mage();
                    case "TANK" ->
                        new Tank();
                    case "FIGHTER" ->
                        new Fighter();
                    case "ASSASIN" ->
                        new Assasin();
                    default ->
                        throw new IllegalArgumentException("Invalid Chmapion type");
                };
                configureChampion(champion, parts);
                configureAbilities(champion, bigParts[2]);
                championListModel.add(champion);
                line = reader.readLine();
            }
            reader.close();
        } catch (Exception ex) {
//            Logger.getLogger(FightOrD1e.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Reading champion error :)" + ex);
        }
    }

    private void applyChampionCard() {
        championNameLabel.setText(activeChampion.getName());
        roleLabel.setText("Role: " + activeChampion.getClass().getSimpleName());
//        activeChampion.getClass().getName();
        hpLabel.setText("Health Points: " + activeChampion.getHP());
        adLabel.setText("Attack Damage: " + activeChampion.getAttackDamage());
        mdLabel.setText("Magic Damage: " + activeChampion.getMagicDamage());
        armorLabel.setText("Physical Resist: " + activeChampion.getPhysicalResist());
        mArmorLabel.setText("Magic Resist: " + activeChampion.getMagicResist());
        championDescriptionTextPane.setText(activeChampion.toString().trim());

        Image img = activeChampion.getIcon().getImage();
        Image scaledImg = img.getScaledInstance(championIconPanel.getWidth(), -1, Image.SCALE_SMOOTH);
        championIconImage.setIcon(new ImageIcon(scaledImg));
    }

    public void applyChampionNickname(String name) {
        
    }
    
    public void showError(String title, String mess)
    {
        if(title.isBlank()) title = "Error";
//        if(client.choosenChampion == null)
//        {
        JOptionPane.showMessageDialog(this,
                mess,
                title,
                JOptionPane.ERROR_MESSAGE);
//        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChampionsCard;
    private javax.swing.JPanel MainOptionPanel;
    private javax.swing.JPanel UserMainCard;
    private javax.swing.JLabel adLabel;
    private javax.swing.JLabel armorLabel;
    private javax.swing.JTextPane championDescriptionTextPane;
    private javax.swing.JLabel championIconImage;
    private javax.swing.JPanel championIconPanel;
    private javax.swing.JList<String> championList;
    private javax.swing.JLabel championListLabel;
    private javax.swing.JLabel championNameLabel;
    private javax.swing.JButton championsButton;
    private javax.swing.JLabel chooseChampionLabel;
    private javax.swing.JList<String> chooseChampionList;
    private javax.swing.JButton findGameButton;
    private javax.swing.JLabel hpLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton leaveButton;
    private javax.swing.JLabel mArmorLabel;
    private javax.swing.JLabel mdLabel;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JLabel nicknameLabel;
    private javax.swing.JButton profileButton;
    private javax.swing.JButton reconnectButton;
    private javax.swing.JButton returnMenuButton;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}

class Closer extends WindowAdapter {

    GameClient client;

    Closer(GameClient client) {
        this.client = client;
    }

    public void windowClosing(WindowEvent e) {
        client.out.println("ENDLEAVEEND");
        System.exit(0);
    }
}
